sudo apt install python3-pip --fix-missing -y
pip3 install requests

FROM python:3.7
WORKDIR /code
ENV FLASK_APP=app.py
ENV FLASK_RUN_HOST=0.0.0.0
COPY requirements.txt requirements.txt
RUN pip3 install -r requirements.txt
EXPOSE 5000
COPY . .
CMD ["flask", "run"]


Instructions

Create a folder called docker-ml-scenario and do the following

Write a flask app to deploy a ML model in app.py.

Write the packages required to be installed in requirements.txt.

Create a Dockerfile

Create a Dockerfile using the following contents in the docker-ml-scenario folder.





####################################################################################

$ minikube start

# Installe kubectl
# install minikube

curl -LO https://storage.googleapis.com/kubernetes-release/release/$(curl - s https://storage.googleapis.com/kubernetes-release/release/release/stable.txt)/bin/linux/amd64/kubectrl

chmod +x ./kubectl

sudo mv ./kubectl/usr/local/bin/kubectl

#install and setup kubectl
#kubernetes.io

kubectl version

# install Minikube release
# git hub

minikube start
kubectl run hello-minkube --image=gcr.io/google_containers/echoserver:1.4 --port=8080
kubectl expose deployment hello-minkube --type=NodePort service "hello-minikube" exposed

get pod

curl $(minkube service hello-minkube --url)

kubectl delete deployment hello-minikube
minikube stop


#####################################################################3
Google : 
https://github.com/jleetutorial/kubernetes-demo

kubectl apply -f ./deployment.yaml
#expose to outside world
minikube service tamcat-deployment --url

curl or url

#####################################################################
deployment.yaml --> replicas:1 make it 4

kubectl scale --replicas=4 deployments/tomcat-deployment

kubectl expose deplyment tomcat deployment --typeLoadBalancer --port=8080 --name=tomcat_loadbalancer

tomcat_loadbalancer

####################################################################
kubectl autoscale deployment tomcat-deployment --cpu-percent=50 --min=1 --max=10
##########################################################################


sudo apt install docker.io -y 
sudo systemctl unmask docker
sudo service docker restart
curl -LO https://storage.googleapis.com/minikube/releases/latest/minikube_latest_amd64.deb
sudo dpkg -i minikube_latest_amd64.deb
rm -rf minikube_latest_amd64.deb

1. Start Cluster : Launch the minikube cluster with the command 'minikube start'
minikube start

2. Use the following yaml to deploy 'iris-classifier-site' to the cluster.
echo "apiVersion: apps/v1
kind: Deployment
metadata:
  name: iris-classifier-site
  labels:
      app: web
spec:
  replicas : 1
  selector :
    matchLabels:
       app : iris-classifier
  template :
    metadata :
        labels : { app : iris-classifier }
    spec:
      containers:
        - name: mlexample
          image: gpcplay/playimages:mlexample
          ports:
              - containerPort: 5000">iris-classifier-deployment.yaml


Hint: Use kubectl on the 'iris-classifier-deployment.yaml' file and wait till the pods are created.
kubectl apply -f ./iris-classifier-deployment.yaml


Hands-on scenario Contd...
3. Create a Service for App Use the following yaml to expose port 30800 outside the cluster. This service will be used by the iris-classifier-site app.

echo "apiVersion: v1
kind: Service
metadata:
    name: iris-classifier-svc
spec:
  selector:
    app: iris-classifier
  type: NodePort
  ports:
    - port: 5000
      nodePort : 30800
      targetPort: 5000">iris-classifier-service.yaml
Hint: Use kubectl on the 'iris-classifier-service.yaml' file.
##??????????


Hands-on scenario Contd...
4. Verify if the application is running with the command 'kubectl get pods'
List the service in the current cluster with the command 'kubectl get services'
Create an environment variable 'NODE_PORT' by using the following expression:

export NODE_PORT=$(kubectl get services/iris-classifier-svc -o go-template='{{(index .spec.ports 0).nodePort}}')

echo NODE_PORT=$NODE_PORT
Test if the app is exposed outside the cluster by using curl:

curl "http://$(minikube ip):$NODE_PORT/classify/?sl=5.1&sw=3.5&pl=1.4&pw=0.3"